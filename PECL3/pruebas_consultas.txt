;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Operaciones de enteros modulares                                                            ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; 9 (mod 5) => (testenteros ((modulo_canonico nueve) cinco)) => 4 
; 12 (mod 7) => (testenteros ((modulo_canonico doce) siete)) => 5

; 9 + 3 (mod 5) => (testenteros(((suma_modular nueve) tres) cinco)) => 2 
; 5 + 8 (mod 7) => (testenteros(((suma_modular cinco) ocho) siete)) => 6 

; 10 - 3 (mod 3) => (testenteros(((resta_modular diez) tres) tres)) => 1 
; -5 - 2 (mod 5) => (testenteros(((resta_modular -cinco) dos) cinco)) => 3

; 7 * 4 (mod 3) => (testenteros(((producto_modular siete) cuatro) tres)) => 1 
; 3 * 6 (mod 5) => (testenteros(((producto_modular tres) seis) cinco)) => 1 

; inversa 3 (mod 5) => ((tiene_inverso? tres) cinco) => #<procedure:true>
; inversa 3 (mod 6) => ((tiene_inverso? tres) seis) => #<procedure:false>

; Ejemplos:
; Inverso (5 (mod 9)) => (testenteros((calculo_inverso cinco) nueve)) => 2
; Inverso (4 (mod 4)) => (testenteros((calculo_inverso cuatro) cuatro)) => 0 ( Error! )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Operaciones de matrices                                                                     ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Ejemplos:
; (testmatrices(((suma_matrices matriz_prueba1) matriz_prueba2) tres)) => ((0 0) (1 2))

; ((2 4) (-1 5)) - ((1 2)(2 3))  (mod 5) => (testmatrices (((resta_matrices matriz_prueba1) matriz_prueba2) cinco)) => ((1 2) (2 2))
; ((2 1)(-3 2)) - ((1 -3) (0 4)) (mod 7) => (testmatrices (((resta_matrices matriz_prueba3) matriz_prueba4) siete)) => ((1 4) (4 5))

; matriz_prueba3 * 2 (mod 3) => (testmatrices(((producto_escalar matriz_prueba3) dos) tres)) => ((1 2) (0 1))
; matriz_prieba1 * 7 (mod 8) => (testmatrices(((producto_escalar matriz_prueba1) siete) ocho)) => ((6 4) (1 3)) 

; matriz_prueba1 * matriz_prueba2 (mod 5)=> (testmatrices (((producto_matrices matriz_prueba1) matriz_prueba2) cinco)) => ((0 4) (1 3))
; matriz_prueba3 * matriz_nula (mod 7) => (testmatrices (((producto_matrices matriz_prueba3) matriz_nula) siete)) => ((0 0) (0 0))

; det(matriz_prueba1) (mod 3) => (testenteros((calcula_determinante matriz_prueba1) tres)) => 2
; det(matriz_prueba3) (mod 4) => (testenteros((calcula_determinante matriz_prueba3) cuatro)) => 3

; rango(matriz_prueba1) (mod 6) => (testenteros((calcula_rango matriz_prueba3) seis)) => 2
; rango(matriz_prueba2) (mod 3) => (testenteros((calcula_rango matriz_prueba2) tres)) => 2

; ((hay_inversa? matriz_prueba1) tres) => #<procedure:true> (Si)

; Inversa(matriz_prueba1) (mod 3) => (testmatrices((calcula_inversa matriz_prueba1) tres)) => ((1 1) (2 1))
; Inversa(matriz_prueba2) (mod 2) => (testmatrices((calcula_inversa matriz_prueba2) dos)) => ((1 0) (0 1))

; Potencia(matriz_prueba1)**2 (mod 2) => (testmatrices(((potencia_matrices_binario matriz_prueba1) dos) dos)) => ((0 0) (1 1))
; Potencia(matriz_prueba2)**3 (mod 3) => (testmatrices(((potencia_matrices_binario matriz_prueba2) tres) tres)) => ((0 1) (1 1))